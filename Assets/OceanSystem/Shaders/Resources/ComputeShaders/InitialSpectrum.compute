#pragma kernel CalculateInitialSpectrum
#pragma kernel CalculateConjugatedSpectrum

#include "GPURandom.hlsl"
#include "Oceanography.hlsl"

RWTexture2DArray<float4> H0;
// wave vector x, chop, wave vector z, frequency
RWTexture2DArray<float4> WavesData;
RWTexture2DArray<float2> H0K;

StructuredBuffer<SpectrumParams> Spectrums;
Texture2D<float2> EqualizerRamp0;
SamplerState samplerEqualizerRamp0;
Texture2D<float2> EqualizerRamp1;
SamplerState samplerEqualizerRamp1;

cbuffer Params
{
    float4 LengthScales;
    float4 CutoffsHigh;
    float4 CutoffsLow;
    float2 RampsXLimits;
    uint Size;
    uint CascadesCount;
    float Chop;
    float LocalWindDirection;
    float SwellDirection;
    float EqualizerLerpValue;
};

float NormalRandom(uint3 id)
{
	float2 random01 = hash23(id);
    return cos(2 * OCEANOGRAPHY_PI * random01.x) * sqrt(-2 * log(random01.y));
}


float CascadeContribution(float k, int cascade)
{
	if (k > CutoffsHigh[cascade] || k < CutoffsLow[cascade])
		return 0;
	else
    {
        float total = 0;
        for (uint i = 0; i < CascadesCount; i++)
        {
            total += k <= CutoffsHigh[i] && k >= CutoffsLow[i];
        }
        return 1 / total;
    }
}


void CalculateInitialsForCascade(uint3 id)
{
    float2 noise = float2(NormalRandom(id),
			NormalRandom(uint3(id.xy, id.z + CascadesCount)));
    float deltaK = 2 * OCEANOGRAPHY_PI / LengthScales[id.z];
	int nx = id.x - Size / 2;
	int nz = id.y - Size / 2;
	float2 k = float2(nx, nz) * deltaK;
	float kLength = length(k);
	
	float contribution = CascadeContribution(kLength, id.z);
	
	if (contribution > 0)
	{
		float theta = atan2(k.y, k.x);
		float omega = Frequency(kLength, Depth);
		float dOmegadk = FrequencyDerivative(kLength, Depth);

        float spectrum = FullSpectrum(omega, theta - LocalWindDirection / 180 * OCEANOGRAPHY_PI, Spectrums[0]) * Spectrums[0].scale
			* ShortWavesFade(kLength, Spectrums[0].shortWavesFade);
		if (Spectrums[1].scale > 0)
            spectrum += FullSpectrum(omega, theta - SwellDirection / 180 * OCEANOGRAPHY_PI, Spectrums[1]) * Spectrums[1].scale
				* ShortWavesFade(kLength, Spectrums[1].shortWavesFade);
		
        float rampUV = saturate((-RampsXLimits.x + log10(2 * OCEANOGRAPHY_PI / kLength)) / (RampsXLimits.y - RampsXLimits.x));
		float2 eq0 = EqualizerRamp0.SampleLevel(samplerEqualizerRamp0, rampUV, 0);
        float2 eq1 = EqualizerRamp1.SampleLevel(samplerEqualizerRamp1, rampUV, 0);
        float2 eq = lerp(eq0, eq1, EqualizerLerpValue);
        float scaleRamp = eq.r;
		float lambda = Chop * eq.g;
		
		WavesData[id] = float4(k.x, lambda, k.y, omega);
		H0K[id] = contribution * scaleRamp * float2(noise.x, noise.y)
			* sqrt(2 * spectrum * abs(dOmegadk) / kLength * deltaK * deltaK);
	}
	else
	{
		WavesData[id] = float4(k.x, 0, k.y, 0);
		H0K[id] = 0;
	}
}

[numthreads(8, 8, 1)]
void CalculateInitialSpectrum(uint3 id : SV_DispatchThreadID)
{
	for (uint i = 0; i < CascadesCount; i++)
	{
		CalculateInitialsForCascade(uint3(id.xy, i));
	}
}

[numthreads(8,8,1)]
void CalculateConjugatedSpectrum(uint3 id : SV_DispatchThreadID)
{
	for (uint i = 0; i < CascadesCount; i++)
	{
		float2 h0K = H0K[uint3(id.xy, i)];
		float2 h0MinusK = H0K[uint3((Size - id.x) % Size, (Size - id.y) % Size, i)];
		H0[uint3(id.xy, i)] = float4(h0K.x, h0K.y, h0MinusK.x, -h0MinusK.y);
	}
}
